{"version":3,"sources":["LineChart.js","App.js","serviceWorker.js","index.js"],"names":["range","LineChart","data","outerWidth","width","outerHeight","height","minDay","Math","min","map","day","maxDay","max","minPrice","price","maxPrice","x","y","yTicks","floor","ceil","round","fill","stroke","fontSize","viewBox","transform","translate","padding","values","Circles","key","cx","cy","r","Line","strokeWidth","d","line","XAxis","props","textAnchor","formatDate","YAxis","i","join","toLocaleDateString","month","timeZone","step","Date","App","className","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1bca9ba.chunk.js","sourcesContent":["import React from \"react\";\n\nconst padding = 40;\n\nexport default function LineChart({\n  data,\n  width: outerWidth,\n  height: outerHeight\n}) {\n  // Calculate the extent of the data\n  // (not the most efficient way but easily readable)\n  const minDay = Math.min(...data.map(({ day }) => day));\n  const maxDay = Math.max(...data.map(({ day }) => day));\n  const minPrice = Math.min(...data.map(({ price }) => price));\n  const maxPrice = Math.max(...data.map(({ price }) => price));\n\n  // Accommodate for the room around the coordinate system\n  const width = outerWidth - 2 * padding;\n  const height = outerHeight - 2 * padding;\n\n  // Create the horizontal and vertical scale functions\n  const x = day => width * ((day - minDay) / (maxDay - minDay));\n  const y = price =>\n    height - height * ((price - minPrice) / (maxPrice - minPrice));\n\n  // Calculate ticks for y axis labels\n  const ticksCount = 5;\n  const yTicks = [\n    ...range(\n      Math.floor(minPrice),\n      Math.ceil(maxPrice),\n      Math.round((Math.ceil(maxPrice) - Math.floor(minPrice)) / ticksCount)\n    )\n  ];\n\n  return (\n    <svg\n      width={outerWidth}\n      height={outerHeight}\n      fill=\"greenyellow\"\n      stroke=\"greenyellow\"\n      fontSize=\"10px\"\n      viewBox={`0 0 ${outerWidth} ${outerHeight}`}\n    >\n      {/* Move down and right to leave room for labels */}\n      <g transform={translate(padding, padding)}>\n        <Circles data={data} x={x} y={y} />\n        <Line data={data} x={x} y={y} />\n      </g>\n      <XAxis\n        data={data}\n        x={x}\n        transform={translate(padding, outerHeight - padding / 2)}\n      />\n      <YAxis\n        values={yTicks}\n        y={y}\n        transform={translate(padding / 2, padding)}\n      />\n    </svg>\n  );\n}\n\nconst Circles = ({ data, x, y }) => (\n  <g>\n    {data.map(({ day, price }) => (\n      <circle key={day} cx={x(day)} cy={y(price)} r=\"4\" />\n    ))}\n  </g>\n);\n\nconst Line = ({ data, x, y }) => (\n  <g>\n    <path\n      strokeWidth=\"2\"\n      fill=\"none\"\n      d={line(\n        data.map(({ day, price }) => ({\n          x: x(day),\n          y: y(price)\n        }))\n      )}\n    />\n  </g>\n);\n\nconst XAxis = ({ data, x, ...props }) => (\n  <g {...props}>\n    {data.map(({ day }) => (\n      <text key={day} x={x(day)} textAnchor=\"middle\">\n        {formatDate(day)}\n      </text>\n    ))}\n  </g>\n);\n\nconst YAxis = ({ values, y, ...props }) => (\n  <g {...props}>\n    {values.map((price, i) => (\n      <text key={i} y={y(price)} textAnchor=\"middle\">\n        {price}\n      </text>\n    ))}\n  </g>\n);\n\n// Returns a string like M1,2L3,4L5,6\nconst line = data => \"M\" + data.map(({ x, y }) => x + \",\" + y).join(\"L\");\n\n// Create SVG translate functions in a readable way\nconst translate = (x, y) => `translate(${x}, ${y})`;\n\n// Return short date like \"Jan 10\"\nconst formatDate = day =>\n  day.toLocaleDateString(\"en-US\", {\n    day: \"numeric\",\n    month: \"short\",\n    timeZone: \"UTC\"\n  });\n\n// Generate numeric values within a range\nfunction* range(min, max, step) {\n  for (let i = min; i < max; i += step) {\n    yield i;\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport LineChart from \"./LineChart\";\n\nconst data = [\n  { day: new Date(\"2020-01-06\"), price: 299.799988 },\n  { day: new Date(\"2020-01-07\"), price: 298.390015 },\n  { day: new Date(\"2020-01-08\"), price: 303.190002 },\n  { day: new Date(\"2020-01-09\"), price: 309.630005 },\n  { day: new Date(\"2020-01-10\"), price: 310.329987 },\n  { day: new Date(\"2020-01-13\"), price: 316.959991 },\n  { day: new Date(\"2020-01-14\"), price: 312.679993 },\n  { day: new Date(\"2020-01-15\"), price: 311.339996 },\n  { day: new Date(\"2020-01-16\"), price: 315.23999 },\n  { day: new Date(\"2020-01-17\"), price: 318.730011 }\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <LineChart width={600} height={200} data={data} />\n        <p>\n          <a href=\"https://salomvary.com/react-charts.html\">Blog post</a>{' '}|{' '}\n          <a href=\"https://github.com/salomvary/react-charts-demo\">Git repo</a>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}